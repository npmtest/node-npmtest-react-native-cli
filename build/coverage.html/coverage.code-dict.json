{"/home/travis/build/npmtest/node-npmtest-react-native-cli/test.js":"/* istanbul instrument in package npmtest_react_native_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-cli/lib.npmtest_react_native_cli.js":"/* istanbul instrument in package npmtest_react_native_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_native_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_native_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-native-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_native_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_native_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_native_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_native_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_native_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_native_cli.__dirname + '/lib.npmtest_react_native_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-cli/node_modules/react-native-cli/index.js":"#!/usr/bin/env node\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// /!\\ DO NOT MODIFY THIS FILE /!\\\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n// react-native-cli is installed globally on people's computers. This means\n// that it is extremely difficult to have them upgrade the version and\n// because there's only one global version installed, it is very prone to\n// breaking changes.\n//\n// The only job of react-native-cli is to init the repository and then\n// forward all the commands to the local version of react-native.\n//\n// If you need to add a new command, please add it to local-cli/.\n//\n// The only reason to modify this file is to add more warnings and\n// troubleshooting information for the `react-native init` command.\n//\n// Do not make breaking changes! We absolutely don't want to have to\n// tell people to update their global version of react-native-cli.\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// /!\\ DO NOT MODIFY THIS FILE /!\\\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar exec = require('child_process').exec;\nvar execSync = require('child_process').execSync;\nvar chalk = require('chalk');\nvar prompt = require('prompt');\nvar semver = require('semver');\n/**\n * Used arguments:\n *   -v --version - to print current version of react-native-cli and react-native dependency\n *   if you are in a RN app folder\n * init - to create a new project and npm install it\n *   --verbose - to print logs while init\n *   --version <alternative react-native package> - override default (https://registry.npmjs.org/react-native@latest),\n *      package to install, examples:\n *     - \"0.22.0-rc1\" - A new app will be created using a specific version of React Native from npm repo\n *     - \"https://registry.npmjs.org/react-native/-/react-native-0.20.0.tgz\" - a .tgz archive from any npm repo\n *     - \"/Users/home/react-native/react-native-0.22.0.tgz\" - for package prepared with `npm pack`, useful for e2e tests\n */\n\nvar options = require('minimist')(process.argv.slice(2));\n\nvar CLI_MODULE_PATH = function() {\n  return path.resolve(\n    process.cwd(),\n    'node_modules',\n    'react-native',\n    'cli.js'\n  );\n};\n\nvar REACT_NATIVE_PACKAGE_JSON_PATH = function() {\n  return path.resolve(\n    process.cwd(),\n    'node_modules',\n    'react-native',\n    'package.json'\n  );\n};\n\nif (options._.length === 0 && (options.v || options.version)) {\n  printVersionsAndExit(REACT_NATIVE_PACKAGE_JSON_PATH());\n}\n\n// Use Yarn if available, it's much faster than the npm client.\n// Return the version of yarn installed on the system, null if yarn is not available.\nfunction getYarnVersionIfAvailable() {\n  var yarnVersion;\n  try {\n    // execSync returns a Buffer -> convert to string\n    if (process.platform.startsWith('win')) {\n      yarnVersion = (execSync('yarn --version').toString() || '').trim();\n    } else {\n      yarnVersion = (execSync('yarn --version 2>/dev/null').toString() || '').trim();\n    }\n  } catch (error) {\n    return null;\n  }\n  // yarn < 0.16 has a 'missing manifest' bug\n  try {\n    if (semver.gte(yarnVersion, '0.16.0')) {\n      return yarnVersion;\n    } else {\n      return null;\n    }\n  } catch (error) {\n    console.error('Cannot parse yarn version: ' + yarnVersion);\n    return null;\n  }\n}\n\nvar cli;\nvar cliPath = CLI_MODULE_PATH();\nif (fs.existsSync(cliPath)) {\n  cli = require(cliPath);\n}\n\nvar commands = options._;\nif (cli) {\n  cli.run();\n} else {\n  if (options._.length === 0 && (options.h || options.help)) {\n    console.log([\n      '',\n      '  Usage: react-native [command] [options]',\n      '',\n      '',\n      '  Commands:',\n      '',\n      '    init <ProjectName> [options]  generates a new project and installs its dependencies',\n      '',\n      '  Options:',\n      '',\n      '    -h, --help    output usage information',\n      '    -v, --version output the version number',\n      '',\n    ].join('\\n'));\n    process.exit(0);\n  }\n\n  if (commands.length === 0) {\n    console.error(\n      'You did not pass any commands, run `react-native --help` to see a list of all available commands.'\n    );\n    process.exit(1);\n  }\n\n  switch (commands[0]) {\n  case 'init':\n    if (!commands[1]) {\n      console.error(\n        'Usage: react-native init <ProjectName> [--verbose]'\n      );\n      process.exit(1);\n    } else {\n      init(commands[1], options);\n    }\n    break;\n  default:\n    console.error(\n      'Command `%s` unrecognized. ' +\n      'Make sure that you have run `npm install` and that you are inside a react-native project.',\n      commands[0]\n    );\n    process.exit(1);\n    break;\n  }\n}\n\nfunction validateProjectName(name) {\n  if (!name.match(/^[$A-Z_][0-9A-Z_$]*$/i)) {\n    console.error(\n      '\"%s\" is not a valid name for a project. Please use a valid identifier ' +\n        'name (alphanumeric).',\n      name\n    );\n    process.exit(1);\n  }\n\n  if (name === 'React') {\n    console.error(\n      '\"%s\" is not a valid name for a project. Please do not use the ' +\n        'reserved word \"React\".',\n      name\n    );\n    process.exit(1);\n  }\n}\n\n/**\n * @param name Project name, e.g. 'AwesomeApp'.\n * @param options.verbose If true, will run 'npm install' in verbose mode (for debugging).\n * @param options.version Version of React Native to install, e.g. '0.38.0'.\n * @param options.npm If true, always use the npm command line client,\n *                       don't use yarn even if available.\n */\nfunction init(name, options) {\n  validateProjectName(name);\n\n  if (fs.existsSync(name)) {\n    createAfterConfirmation(name, options);\n  } else {\n    createProject(name, options);\n  }\n}\n\nfunction createAfterConfirmation(name, options) {\n  prompt.start();\n\n  var property = {\n    name: 'yesno',\n    message: 'Directory ' + name + ' already exists. Continue?',\n    validator: /y[es]*|n[o]?/,\n    warning: 'Must respond yes or no',\n    default: 'no'\n  };\n\n  prompt.get(property, function (err, result) {\n    if (result.yesno[0] === 'y') {\n      createProject(name, options);\n    } else {\n      console.log('Project initialization canceled');\n      process.exit();\n    }\n  });\n}\n\nfunction createProject(name, options) {\n  var root = path.resolve(name);\n  var projectName = path.basename(root);\n\n  console.log(\n    'This will walk you through creating a new React Native project in',\n    root\n  );\n\n  if (!fs.existsSync(root)) {\n    fs.mkdirSync(root);\n  }\n\n  var packageJson = {\n    name: projectName,\n    version: '0.0.1',\n    private: true,\n    scripts: {\n      start: 'node node_modules/react-native/local-cli/cli.js start'\n    }\n  };\n  fs.writeFileSync(path.join(root, 'package.json'), JSON.stringify(packageJson));\n  process.chdir(root);\n\n  run(root, projectName, options);\n}\n\nfunction getInstallPackage(rnPackage) {\n  var packageToInstall = 'react-native';\n  var isValidSemver = semver.valid(rnPackage);\n  if (isValidSemver) {\n    packageToInstall += '@' + isValidSemver;\n  } else if (rnPackage) {\n    // for tar.gz or alternative paths\n    packageToInstall = rnPackage;\n  }\n  return packageToInstall;\n}\n\nfunction run(root, projectName, options) {\n  // E.g. '0.38' or '/path/to/archive.tgz'\n  const rnPackage = options.version;\n  const forceNpmClient = options.npm;\n  const yarnVersion = (!forceNpmClient) && getYarnVersionIfAvailable();\n  var installCommand;\n  if (options.installCommand) {\n    // In CI environments it can be useful to provide a custom command,\n    // to set up and use an offline mirror for installing dependencies, for example.\n    installCommand = options.installCommand;\n  } else {\n    if (yarnVersion) {\n      console.log('Using yarn v' + yarnVersion);\n      console.log('Installing ' + getInstallPackage(rnPackage) + '...');\n      installCommand = 'yarn add ' + getInstallPackage(rnPackage) + ' --exact';\n      if (options.verbose) {\n        installCommand += ' --verbose';\n      }\n    } else {\n      console.log('Installing ' + getInstallPackage(rnPackage) + '...');\n      if (!forceNpmClient) {\n        console.log('Consider installing yarn to make this faster: https://yarnpkg.com');\n      }\n      installCommand = 'npm install --save --save-exact ' + getInstallPackage(rnPackage);\n      if (options.verbose) {\n        installCommand += ' --verbose';\n      }\n    }\n  }\n  try {\n    execSync(installCommand, {stdio: 'inherit'});\n  } catch (err) {\n    console.error(err);\n    console.error('Command `' + installCommand + '` failed.');\n    process.exit(1);\n  }\n  checkNodeVersion();\n  cli = require(CLI_MODULE_PATH());\n  cli.init(root, projectName);\n}\n\nfunction checkNodeVersion() {\n  var packageJson = require(REACT_NATIVE_PACKAGE_JSON_PATH());\n  if (!packageJson.engines || !packageJson.engines.node) {\n    return;\n  }\n  if (!semver.satisfies(process.version, packageJson.engines.node)) {\n    console.error(chalk.red(\n        'You are currently running Node %s but React Native requires %s. ' +\n        'Please use a supported version of Node.\\n' +\n        'See https://facebook.github.io/react-native/docs/getting-started.html'\n      ),\n      process.version,\n      packageJson.engines.node);\n  }\n}\n\nfunction printVersionsAndExit(reactNativePackageJsonPath) {\n  console.log('react-native-cli: ' + require('./package.json').version);\n  try {\n    console.log('react-native: ' + require(reactNativePackageJsonPath).version);\n  } catch (e) {\n    console.log('react-native: n/a - not inside a React Native project directory');\n  }\n  process.exit();\n}\n\n"}